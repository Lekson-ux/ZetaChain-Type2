/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "UniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02__factory>;
    getContractFactory(
      name: "ZetaCommonErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaCommonErrors__factory>;
    getContractFactory(
      name: "ZetaConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaConnector__factory>;
    getContractFactory(
      name: "ZetaReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaReceiver__factory>;
    getContractFactory(
      name: "ZetaTokenConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaTokenConsumer__factory>;
    getContractFactory(
      name: "IZRC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZRC20__factory>;
    getContractFactory(
      name: "ZContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZContract__factory>;
    getContractFactory(
      name: "SystemContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SystemContract__factory>;
    getContractFactory(
      name: "SystemContractErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SystemContractErrors__factory>;
    getContractFactory(
      name: "ZetaEthMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaEthMock__factory>;
    getContractFactory(
      name: "SwapHelperLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapHelperLib__factory>;
    getContractFactory(
      name: "TestSystemContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestSystemContract__factory>;
    getContractFactory(
      name: "TestZRC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestZRC20__factory>;
    getContractFactory(
      name: "ZetaConnectorMockValue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaConnectorMockValue__factory>;

    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "UniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02>;
    getContractAt(
      name: "ZetaCommonErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaCommonErrors>;
    getContractAt(
      name: "ZetaConnector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaConnector>;
    getContractAt(
      name: "ZetaReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaReceiver>;
    getContractAt(
      name: "ZetaTokenConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaTokenConsumer>;
    getContractAt(
      name: "IZRC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZRC20>;
    getContractAt(
      name: "ZContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZContract>;
    getContractAt(
      name: "SystemContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SystemContract>;
    getContractAt(
      name: "SystemContractErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SystemContractErrors>;
    getContractAt(
      name: "ZetaEthMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaEthMock>;
    getContractAt(
      name: "SwapHelperLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapHelperLib>;
    getContractAt(
      name: "TestSystemContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestSystemContract>;
    getContractAt(
      name: "TestZRC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestZRC20>;
    getContractAt(
      name: "ZetaConnectorMockValue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaConnectorMockValue>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
