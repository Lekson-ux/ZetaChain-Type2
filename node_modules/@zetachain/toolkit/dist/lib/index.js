"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processTemplates = void 0;
const fs = __importStar(require("fs"));
const handlebars = __importStar(require("handlebars"));
const path = __importStar(require("path"));
const numberTypes = [
    "int",
    "int8",
    "int16",
    "int32",
    "int128",
    "int256",
    "uint",
    "uint8",
    "uint32",
    "uint16",
    "uint128",
    "uint256",
];
const addressTypes = ["address"];
const boolTypes = ["bool"];
const bytesTypes = ["bytes32"];
const stringTypes = ["string"];
const allTypes = [
    ...numberTypes,
    ...addressTypes,
    ...boolTypes,
    ...bytesTypes,
    ...stringTypes,
];
const capitalizeFirstChar = (input) => {
    if (input.length === 0) {
        return input;
    }
    const firstChar = input.charAt(0).toUpperCase();
    const restOfTheString = input.slice(1);
    return firstChar + restOfTheString;
};
const prepareData = (args) => {
    const argsList = args.arguments || [];
    const names = argsList.map((i) => i.split(":")[0]);
    const types = argsList.map((i) => {
        let t = i.split(":")[1];
        if (t === undefined) {
            return "string";
        }
        if (!allTypes.includes(t)) {
            throw new Error(`Invalid type "${t}", must be one of ${allTypes.join(", ")}`);
        }
        return t;
    });
    const pairs = names.map((v, i) => [v, types[i]]);
    const pairsWithDataLocation = pairs.map((pair) => {
        if (pair[1] === "string") {
            return [pair[0], "string memory"];
        }
        else {
            return pair;
        }
    });
    const contractName = sanitizeSolidityFunctionName(args.name);
    const casts = pairs.map((p) => {
        const n = capitalizeFirstChar(p[0]);
        const type = p[1];
        if (numberTypes.includes(type)) {
            return [n, `hre.ethers.BigNumber.from(args.${p[0]})`];
        }
        if (addressTypes.includes(type)) {
            return [n, `hre.ethers.utils.getAddress(args.${p[0]})`];
        }
        if (boolTypes.includes(type)) {
            return [n, `JSON.parse(args.${p[0]})`];
        }
        if (bytesTypes.includes(type)) {
            return [n, `hre.ethers.utils.toUtf8Bytes(args.${p[0]})`];
        }
        // Default case is "string" and other unexpected cases.
        return [n, `args.${p[0]}`];
    });
    const feesNative = args.fees === "native";
    return {
        args,
        arguments: {
            casts,
            feesNative,
            names,
            pairs,
            pairsWithDataLocation,
            types,
        },
        contractName,
        contractNameUnderscore: camelToUnderscoreUpper(contractName),
    };
};
const processTemplatesRecursive = async (template, outputDir, data) => {
    try {
        const templateDir = path.resolve(__dirname, path.resolve(__dirname, "..", "templates", template));
        const files = fs.readdirSync(templateDir);
        for (const file of files) {
            const templatePath = path.join(templateDir, file);
            // Compiling filename as a template
            const filenameTemplate = handlebars.compile(file);
            const filename = filenameTemplate(data);
            // Replacing .hbs extension if the file was a handlebars template
            const outputPath = path.join(outputDir, filename.replace(".hbs", ""));
            fs.mkdirSync(path.dirname(outputPath), { recursive: true });
            if (fs.lstatSync(templatePath).isDirectory()) {
                // If file is a directory, recursively process it
                await processTemplatesRecursive(templatePath, outputPath, data);
            }
            else if (path.extname(file) === ".hbs") {
                const templateContent = fs.readFileSync(templatePath, "utf-8");
                const template = handlebars.compile(templateContent);
                const outputContent = template(data);
                fs.writeFileSync(outputPath, outputContent);
            }
            else {
                fs.copyFileSync(templatePath, outputPath);
            }
        }
    }
    catch (error) {
        console.error(`Error processing templates: ${error}`);
    }
};
const processTemplates = async (templateName, args) => {
    processTemplatesRecursive(templateName, path.resolve(process.cwd()), prepareData(args));
};
exports.processTemplates = processTemplates;
const camelToUnderscoreUpper = (input) => {
    return input.replace(/([a-z])([A-Z])/g, "$1_$2").toUpperCase();
};
const sanitizeSolidityFunctionName = (str) => {
    // Remove any character that's not alphanumeric or underscore
    const cleaned = str.replace(/[^a-zA-Z0-9_]/g, "");
    // If the first character is a digit, prepend with an underscore
    return cleaned.match(/^\d/) ? `_${cleaned}` : cleaned;
};
