"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.faucetTask = void 0;
const drip_1 = require("@zetachain/faucet-cli/dist/commands/drip");
const dotenv = __importStar(require("dotenv"));
const ethers_1 = require("ethers");
const config_1 = require("hardhat/config");
const balances_1 = require("./balances");
dotenv.config();
const faucetError = `
* Alternatively, you can request tokens on any address
  by using the --address flag:
  
  npx hardhat faucet --address <wallet_address>
`;
const getRecipientAddress = (args) => {
    if (args.address) {
        return args.address;
    }
    else if (process.env.PRIVATE_KEY) {
        return new ethers_1.ethers.Wallet(process.env.PRIVATE_KEY).address;
    }
    else {
        console.error(balances_1.walletError + faucetError);
        throw new Error();
    }
};
const main = async (args) => {
    try {
        const address = getRecipientAddress(args);
        await (0, drip_1.drip)({ address });
    }
    catch (error) {
        console.error(error);
    }
};
exports.faucetTask = (0, config_1.task)("faucet", "Request ZETA tokens from the faucet on a specific chain.", main).addOptionalParam("address", "Recipient address. (default: address derived from PRIVATE_KEY env variable)");
