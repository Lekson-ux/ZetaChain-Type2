"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.balancesTask = exports.walletError = void 0;
const dotenv = __importStar(require("dotenv"));
const config_1 = require("hardhat/config");
const ora_1 = __importDefault(require("ora"));
const balances_1 = require("../helpers/balances");
const bitcoinAddress_1 = require("../lib/bitcoinAddress");
dotenv.config();
exports.walletError = `
‚ùå Error: Wallet address not found.

To resolve this issue, please follow these steps:

* Set your PRIVATE_KEY environment variable. You can write
  it to a .env file in the root of your project like this:

  PRIVATE_KEY=123... (without the 0x prefix)
  
  Or you can generate a new private key by running:

  npx hardhat account --save
`;
const balancesError = `
* Alternatively, you can fetch the balance of any address
  by using the --address flag:
  
  npx hardhat balances --address <wallet_address>
`;
const summarizeTokens = (tokens) => {
    let table = {};
    tokens.forEach((token) => {
        if (!table[token.chain_name]) {
            table[token.chain_name] = {};
        }
        const balance = parseFloat(token.balance).toFixed(2);
        if (parseFloat(token.balance) > 0) {
            if (token.coin_type === "Gas") {
                table[token.chain_name].gas = balance;
            }
            else if (token.symbol === "ZETA") {
                table[token.chain_name].zeta = balance;
            }
            else if (token.coin_type === "ERC20") {
                table[token.chain_name].erc20 =
                    (table[token.chain_name].erc20
                        ? table[token.chain_name].erc20 + " "
                        : "") +
                        balance +
                        " " +
                        token.symbol;
            }
            else if (token.coin_type === "ZRC20") {
                table[token.chain_name].zrc20 =
                    (table[token.chain_name].zrc20
                        ? table[token.chain_name].zrc20 + " "
                        : "") +
                        balance +
                        " " +
                        token.symbol;
            }
        }
    });
    return table;
};
const main = async (args, hre) => {
    const spinner = (0, ora_1.default)("Fetching balances...");
    if (!args.json) {
        spinner.start();
    }
    const { ethers, config } = hre;
    const pk = process.env.PRIVATE_KEY;
    let address;
    let btc_address;
    if (args.address) {
        address = args.address;
    }
    else if (pk) {
        address = new ethers.Wallet(pk).address;
        btc_address = (0, bitcoinAddress_1.bitcoinAddress)(pk);
    }
    else {
        spinner.stop();
        console.error(exports.walletError + balancesError);
        return process.exit(1);
    }
    const balances = (await (0, balances_1.getBalances)(address, btc_address));
    if (args.json) {
        console.log(JSON.stringify(balances, null, 2));
    }
    else {
        spinner.stop();
        console.log(`
EVM: ${address} ${btc_address ? `\nBitcoin: ${btc_address}` : ""}
    `);
        console.table(summarizeTokens(balances));
    }
};
exports.balancesTask = (0, config_1.task)("balances", `Fetch native and ZETA token balances`, main)
    .addOptionalParam("address", `Fetch balances for a specific address`)
    .addFlag("json", "Output balances as JSON");
