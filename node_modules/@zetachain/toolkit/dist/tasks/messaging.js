"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messagingTask = void 0;
const fs = __importStar(require("fs"));
const config_1 = require("hardhat/config");
const path = __importStar(require("path"));
const lib_1 = require("../lib");
const main = async (args, hre) => {
    await (0, lib_1.processTemplates)("messaging", args);
    const configPath = path.resolve(process.cwd(), "hardhat.config.ts");
    let hardhatConfigContents = fs.readFileSync(configPath, "utf8");
    // Add the omnichain tasks to the hardhat.config.ts file
    ["deploy", "interact"].forEach((task) => {
        const content = `import "./tasks/${task}";\n`;
        if (!hardhatConfigContents.includes(content)) {
            hardhatConfigContents = content + hardhatConfigContents;
        }
    });
    fs.writeFileSync(configPath, hardhatConfigContents);
};
exports.messagingTask = (0, config_1.task)("messaging", "Generate code for a cross-chain messaging contract", main)
    .addPositionalParam("name", "Name of the contract")
    .addOptionalParam("fees", "Use ZETA or native gas tokens for cross-chain fees", "native", config_1.types.string)
    .addOptionalVariadicPositionalParam("arguments", "Arguments for a crosschain call (e.g. dest:address to:bytes32 output:uint256)");
