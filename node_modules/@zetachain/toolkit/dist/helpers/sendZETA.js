"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendZETA = void 0;
const networks_1 = __importDefault(require("@zetachain/networks/dist/src/networks"));
const protocol_contracts_1 = require("@zetachain/protocol-contracts");
const ZetaEth_json_1 = __importDefault(require("@zetachain/protocol-contracts/abi/evm/Zeta.eth.sol/ZetaEth.json"));
const ZetaConnectorEth_json_1 = __importDefault(require("@zetachain/protocol-contracts/abi/evm/ZetaConnector.eth.sol/ZetaConnectorEth.json"));
const ZetaConnectorZEVM_json_1 = __importDefault(require("@zetachain/protocol-contracts/abi/zevm/ZetaConnectorZEVM.sol/ZetaConnectorZEVM.json"));
const ethers_1 = require("ethers");
const sendZETA = async (signer, amount, from, destination, recipient) => {
    let connectorContract;
    const destinationChainId = networks_1.default[destination]?.chain_id;
    if (!destinationChainId) {
        throw new Error("Invalid destination chain");
    }
    const destinationAddress = recipient || signer.address;
    const fromZetaChain = from === "zeta_testnet";
    const connectorAddress = (0, protocol_contracts_1.getAddress)("connector", from);
    const zetaTokenAddress = (0, protocol_contracts_1.getAddress)("zetaToken", from);
    connectorContract = new ethers_1.ethers.Contract(connectorAddress, fromZetaChain ? ZetaConnectorZEVM_json_1.default.abi : ZetaConnectorEth_json_1.default.abi, signer);
    const zetaTokenContract = new ethers_1.ethers.Contract(zetaTokenAddress, ZetaEth_json_1.default.abi, signer);
    const value = ethers_1.ethers.utils.parseEther(amount);
    if (fromZetaChain) {
        await signer.sendTransaction({ to: zetaTokenAddress, value });
    }
    await (await zetaTokenContract.connect(signer).approve(connectorAddress, value)).wait();
    return await connectorContract.connect(signer).send({
        destinationAddress,
        destinationChainId,
        destinationGasLimit: 5000000,
        message: ethers_1.ethers.utils.arrayify([]),
        zetaParams: ethers_1.ethers.utils.arrayify([]),
        zetaValueAndGas: value,
    });
};
exports.sendZETA = sendZETA;
