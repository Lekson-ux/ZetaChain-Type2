"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPools = void 0;
const UniswapV2Factory_json_1 = __importDefault(require("@uniswap/v2-core/build/UniswapV2Factory.json"));
const UniswapV2Pair_json_1 = __importDefault(require("@uniswap/v2-core/build/UniswapV2Pair.json"));
const getEndpoints_1 = require("@zetachain/networks/dist/src/getEndpoints");
const protocol_contracts_1 = require("@zetachain/protocol-contracts");
const ethers_1 = require("ethers");
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
const getPools = async () => {
    const api = (0, getEndpoints_1.getEndpoints)("cosmos-http", "zeta_testnet")[0]?.url;
    const endpoint = `${api}/zeta-chain/fungible/foreign_coins`;
    const response = await (0, isomorphic_fetch_1.default)(endpoint);
    const data = await response.json();
    const rpc = (0, getEndpoints_1.getEndpoints)("evm", "zeta_testnet")[0]?.url;
    const provider = new ethers_1.ethers.providers.StaticJsonRpcProvider(rpc);
    const uniswapV2FactoryAddress = (0, protocol_contracts_1.getAddress)("uniswapv2Factory", "zeta_testnet");
    const zetaTokenAddress = (0, protocol_contracts_1.getAddress)("zetaToken", "zeta_testnet").toLowerCase();
    const UniswapV2FactoryContract = new ethers_1.ethers.Contract(uniswapV2FactoryAddress, UniswapV2Factory_json_1.default.abi, provider);
    const totalPairs = await UniswapV2FactoryContract.allPairsLength();
    let pairs = [];
    for (let i = 0; i < totalPairs; i++) {
        pairs.push(await UniswapV2FactoryContract.allPairs(i));
    }
    const poolPromises = pairs.map(async (pair) => {
        let pool = {
            pair,
            t0: {},
            t1: {},
        };
        const pairContract = new ethers_1.ethers.Contract(pair, UniswapV2Pair_json_1.default.abi, provider);
        pool.t0.address = await pairContract.token0();
        pool.t1.address = await pairContract.token1();
        const reserves = await pairContract.getReserves();
        pool.t0.reserve = reserves[0];
        pool.t1.reserve = reserves[1];
        return pool;
    });
    const pools = await Promise.all(poolPromises);
    return pools;
};
exports.getPools = getPools;
