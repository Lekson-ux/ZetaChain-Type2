#! /usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const figlet_1 = __importDefault(require("figlet"));
const LaunchDarkly = __importStar(require("launchdarkly-node-client-sdk"));
const process_1 = require("process");
const drip_1 = require("./commands/drip");
const github_auth_1 = require("./commands/github-auth");
const constants_1 = require("./constants");
const tools_1 = require("./tools");
const packageJson = require("../package.json");
const cli = () => __awaiter(void 0, void 0, void 0, function* () {
    const client = yield LaunchDarkly.initialize(constants_1.LD_CLIENT_SIDE_ID, {
        kind: "user",
        key: "context-key",
    }, {
        logger: LaunchDarkly.basicLogger({
            level: "error",
        }),
    });
    yield Promise.all([client.waitUntilReady(), client.setStreaming(true)]);
    const isEnabled = client.variation("enabled", true);
    if (!isEnabled) {
        console.error("ðŸš§ Faucet is undergoing maintenance. Please try again later.");
        return;
    }
    const { version } = packageJson;
    tools_1.program
        .version(version)
        .name("zetafaucet")
        .option("-l, --logout", "Logout from GitHub account")
        .option("-d, --drip", "Drips in ZetaChain Athens")
        .option("-a, --address <address>", "Select address")
        .helpOption("-h, --help", "Display help for command")
        .description("CLI to interact with the ZetaChain Faucet")
        .parse(process.argv);
    const options = tools_1.program.opts();
    if (options.logout)
        yield (0, github_auth_1.logoutGithub)();
    else if (options.drip) {
        if (!options.address) {
            console.error("ðŸš« Please specify an address with -a <address> or --address <address> to request assets.");
            return;
        }
        if (!ethers_1.ethers.utils.isAddress(options.address)) {
            console.error("ðŸš« Invalid address.");
            return;
        }
        console.info(figlet_1.default.textSync("Zeta Faucet CLI"));
        yield (0, drip_1.drip)({ address: options.address });
    }
    else
        console.error("ðŸš« Invalid command. See -h for available commands.");
    (0, process_1.exit)(0);
});
cli().then(() => {
    (0, process_1.exit)(0);
});
//# sourceMappingURL=cli.js.map