"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logoutGithub = exports.getGithubAccessToken = void 0;
const axios_1 = __importDefault(require("axios"));
const fs_1 = __importDefault(require("fs"));
const readline_1 = require("readline");
const zod_1 = require("zod");
const constants_1 = require("../constants");
const readTokenFromFile = () => {
    return JSON.parse(fs_1.default.readFileSync(constants_1.ACCESS_TOKEN_FILE_PATH, "utf8"));
};
const writeTokenToFile = (token) => {
    fs_1.default.writeFileSync(constants_1.ACCESS_TOKEN_FILE_PATH, JSON.stringify(token), "utf8");
};
const requestDeviceCode = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const requestCodeSchema = zod_1.z.object({
            device_code: zod_1.z.string(),
            expires_in: zod_1.z.number(),
            interval: zod_1.z.number(),
            user_code: zod_1.z.string(),
            verification_uri: zod_1.z.string(),
        });
        const response = yield (0, axios_1.default)({
            method: "post",
            url: constants_1.GITHUB_REQUEST_CODE_URL,
            params: {
                client_id: constants_1.CLIENT_ID,
            },
            headers: {
                Accept: "application/json",
            },
        });
        const parseResult = requestCodeSchema.safeParse(response.data);
        if (parseResult.success) {
            return parseResult.data;
        }
        console.error("❌ Could not parse device code from GitHub.", response.data, parseResult.error.message);
    }
    catch (error) {
        console.error("❌ Could not request device code from GitHub.", error.message);
    }
    return null;
});
const requestToken = (deviceCode) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const accessTokenSchema = zod_1.z.object({
            error: zod_1.z.string().optional(),
            error_description: zod_1.z.string().optional(),
            error_uri: zod_1.z.string().optional(),
            access_token: zod_1.z.string().optional(),
        });
        const response = yield (0, axios_1.default)({
            method: "post",
            url: constants_1.GITHUB_REQUEST_TOKEN_URL,
            params: {
                client_id: constants_1.CLIENT_ID,
                device_code: deviceCode,
                grant_type: "urn:ietf:params:oauth:grant-type:device_code",
            },
            headers: {
                Accept: "application/json",
            },
        });
        const parseResult = accessTokenSchema.safeParse(response.data);
        if (parseResult.success) {
            return parseResult.data;
        }
        console.error("❌ Could not parse access token from GitHub.", response.data, parseResult.error.message);
    }
    catch (error) {
        console.error("❌ Could not request access token from GitHub.", error.message);
    }
    return null;
});
const whoami = (accessToken) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const whoamiSchema = zod_1.z.object({
            login: zod_1.z.string(),
        });
        const response = yield axios_1.default.get(constants_1.GITHUB_WHOAMI_URL, {
            headers: {
                Accept: "application/json",
                Authorization: `Bearer ${accessToken}`,
            },
        });
        const parseResult = whoamiSchema.safeParse(response.data);
        if (parseResult.success) {
            return parseResult.data;
        }
    }
    catch (error) {
        console.error("❌ Could not request user from GitHub.", error.message);
    }
    return null;
});
const getGithubAccessToken = () => __awaiter(void 0, void 0, void 0, function* () {
    const readline = (0, readline_1.createInterface)({
        input: process.stdin,
        output: process.stdout,
    });
    const readLineAsync = (msg) => {
        return new Promise((resolve) => {
            readline.question(msg, (userRes) => {
                resolve(userRes);
            });
        });
    };
    try {
        // Checking saved access token.
        const { access_token } = readTokenFromFile();
        const whoamiInfo = yield whoami(access_token);
        if (whoamiInfo === null || whoamiInfo === void 0 ? void 0 : whoamiInfo.login) {
            console.info(`🪪 GitHub logged as ${whoamiInfo.login}.`);
            return access_token;
        }
        console.error("❌ Invalid access token.");
    }
    catch (error) {
        // Need to request a new access token.
        // Requesting device code.
        const deviceCodeInfo = yield requestDeviceCode();
        if (!deviceCodeInfo) {
            console.error("❌ Cannot continue without device code.");
            return null;
        }
        const deviceCode = deviceCodeInfo.device_code;
        // Asking user to confirm device verification.
        yield readLineAsync(`🔐 Please confirm GitHub login at: '${deviceCodeInfo.verification_uri}' using this code: '${deviceCodeInfo.user_code}', and then press Enter to continue.`);
        // Requesting access token.
        const accessTokenInfo = yield requestToken(deviceCode);
        if (!accessTokenInfo || accessTokenInfo.error || !accessTokenInfo.access_token) {
            console.error("❌", (accessTokenInfo === null || accessTokenInfo === void 0 ? void 0 : accessTokenInfo.error_description) || "Failed to get access token from GitHub.");
            return null;
        }
        // Verifiying access token.
        const whoamiInfo = yield whoami(accessTokenInfo.access_token);
        if (!(whoamiInfo === null || whoamiInfo === void 0 ? void 0 : whoamiInfo.login)) {
            console.error("❌ Failed to verify access token from GitHub.");
            return null;
        }
        // Saving access token.
        writeTokenToFile({ access_token: accessTokenInfo.access_token });
        console.info(`🪪 GitHub logged as ${whoamiInfo.login}.`);
        return accessTokenInfo.access_token;
    }
    return null;
});
exports.getGithubAccessToken = getGithubAccessToken;
const logoutGithub = () => {
    if (fs_1.default.existsSync(constants_1.ACCESS_TOKEN_FILE_PATH)) {
        fs_1.default.unlinkSync(constants_1.ACCESS_TOKEN_FILE_PATH);
        console.info("👤 GitHub logged out.");
    }
    else {
        console.info("👤 GitHub not logged in.");
    }
};
exports.logoutGithub = logoutGithub;
//# sourceMappingURL=github-auth.js.map