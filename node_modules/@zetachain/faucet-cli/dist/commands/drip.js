"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.drip = void 0;
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("../constants");
const validation_1 = require("../validation");
const github_auth_1 = require("./github-auth");
const drip = ({ address }) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    try {
        const token = yield (0, github_auth_1.getGithubAccessToken)();
        if (!token) {
            console.error("‚ùå Cannot complete request without GitHub access token.");
            return;
        }
        try {
            yield (0, validation_1.validateGithubAccount)(token);
        }
        catch (error) {
            console.error("‚ùå Invalid GitHub account.", error.message);
            return;
        }
        console.info(`üîÑ Requesting assets for ${address} in ZetaChain Athens`);
        const { data } = yield axios_1.default.post(`${constants_1.FAUCET_BASE_URL}/drip`, { address }, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });
        const message = data || "Queued for faucet drip";
        console.info(`‚úÖ ${message}. Please wait a few minutes for the assets to arrive.`);
    }
    catch (error) {
        if (axios_1.default.isAxiosError(error)) {
            console.error("‚ùå Could not request assets from faucet.", ((_a = error.response) === null || _a === void 0 ? void 0 : _a.data) || error.message);
        }
        else {
            console.error("‚ùå Could not request assets from faucet.", error.message);
        }
    }
});
exports.drip = drip;
//# sourceMappingURL=drip.js.map