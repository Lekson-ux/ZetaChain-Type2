"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateGithubAccount = void 0;
const axios_1 = __importDefault(require("axios"));
const dayjs_1 = __importDefault(require("dayjs"));
const zod_1 = require("zod");
const githubUserSchema = zod_1.z.object({
    login: zod_1.z.string(),
    id: zod_1.z.number(),
    created_at: zod_1.z.string(),
    public_repos: zod_1.z.number(),
    two_factor_authentication: zod_1.z.boolean().optional(),
});
const githubUserByIdApiResponseSchema = zod_1.z.object({
    login: zod_1.z.string(),
    id: zod_1.z.number(),
    url: zod_1.z.string(),
});
function validateGithubAccount(token) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data: userResponse } = yield axios_1.default.get(`https://api.github.com/user`, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });
        const githubUser = githubUserSchema.parse(userResponse);
        const { data: userByIdResponse } = yield axios_1.default.get(`https://api.github.com/user/${githubUser.id}`, {
            headers: {
                Accept: "application/json",
            },
        });
        const githubAccountFromUserByIdApi = githubUserByIdApiResponseSchema.parse(userByIdResponse);
        if (githubAccountFromUserByIdApi.id !== githubUser.id) {
            throw new Error("Account mismatch.");
        }
        if (githubUser.public_repos < 1) {
            throw new Error("Account has no public repos.");
        }
        const accountCreationDate = (0, dayjs_1.default)(githubUser.created_at);
        const now = (0, dayjs_1.default)();
        if (now.diff(accountCreationDate, "month") < 3) {
            throw new Error("Account is too new.");
        }
        return githubUser;
    });
}
exports.validateGithubAccount = validateGithubAccount;
//# sourceMappingURL=validation.js.map