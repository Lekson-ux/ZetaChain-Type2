"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNonZetaAddress = exports.getZRC20Address = exports.getAddress = exports.isMainnetNetwork = exports.isTestnetNetwork = exports.isProtocolNetworkName = exports.zetaProtocolNetworks = exports.zetaProtocolMainNetworks = exports.nonZetaAddress = exports.zetaProtocolTestNetworks = exports.isZetaProtocolAddress = exports.zetaProtocolAddress = void 0;
const addresses_json_1 = __importDefault(require("../data/addresses.json"));
exports.zetaProtocolAddress = [
    "connector",
    "erc20Custody",
    "immutableCreate2Factory",
    "tss",
    "tssUpdater",
    "zetaToken",
    "zetaTokenConsumerUniV2",
    "zetaTokenConsumerUniV3",
];
const isZetaProtocolAddress = (str) => exports.zetaProtocolAddress.includes(str);
exports.isZetaProtocolAddress = isZetaProtocolAddress;
exports.zetaProtocolTestNetworks = [
    "baobab_testnet",
    "bsc_testnet",
    "btc_testnet",
    "goerli_testnet",
    "mumbai_testnet",
    "zeta_testnet",
];
exports.nonZetaAddress = [
    "uniswapV2Factory",
    "uniswapV2Router02",
    "uniswapV3Router",
    "uniswapV3Factory",
    "weth9",
];
exports.zetaProtocolMainNetworks = ["eth_mainnet", "bsc_mainnet"];
exports.zetaProtocolNetworks = [...exports.zetaProtocolTestNetworks, ...exports.zetaProtocolMainNetworks];
const isProtocolNetworkName = (str) => exports.zetaProtocolNetworks.includes(str);
exports.isProtocolNetworkName = isProtocolNetworkName;
const isTestnetNetwork = (network) => {
    return exports.zetaProtocolTestNetworks.includes(network);
};
exports.isTestnetNetwork = isTestnetNetwork;
const isMainnetNetwork = (network) => {
    return false;
};
exports.isMainnetNetwork = isMainnetNetwork;
const getAddress = (address, network) => {
    if ((0, exports.isZetaProtocolAddress)(address)) {
        return addresses_json_1.default["ccm"][network][address];
    }
    return addresses_json_1.default["zevm"][network][address];
};
exports.getAddress = getAddress;
const getZRC20Address = (network) => {
    return addresses_json_1.default["zevm"][network]["zrc20"];
};
exports.getZRC20Address = getZRC20Address;
const getNonZetaAddress = (address, network) => {
    return addresses_json_1.default["non_zeta"][network][address];
};
exports.getNonZetaAddress = getNonZetaAddress;
